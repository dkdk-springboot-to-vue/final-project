{
  "version": 3,
  "sources": ["../../webstomp-client/dist/webstomp.js"],
  "sourcesContent": ["(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n  typeof define === 'function' && define.amd ? define(factory) :\n  (global.webstomp = factory());\n}(this, (function () { 'use strict';\n\n  var classCallCheck = function (instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n      throw new TypeError(\"Cannot call a class as a function\");\n    }\n  };\n\n  var createClass = function () {\n    function defineProperties(target, props) {\n      for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n      }\n    }\n\n    return function (Constructor, protoProps, staticProps) {\n      if (protoProps) defineProperties(Constructor.prototype, protoProps);\n      if (staticProps) defineProperties(Constructor, staticProps);\n      return Constructor;\n    };\n  }();\n\n  var slicedToArray = function () {\n    function sliceIterator(arr, i) {\n      var _arr = [];\n      var _n = true;\n      var _d = false;\n      var _e = undefined;\n\n      try {\n        for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n          _arr.push(_s.value);\n\n          if (i && _arr.length === i) break;\n        }\n      } catch (err) {\n        _d = true;\n        _e = err;\n      } finally {\n        try {\n          if (!_n && _i[\"return\"]) _i[\"return\"]();\n        } finally {\n          if (_d) throw _e;\n        }\n      }\n\n      return _arr;\n    }\n\n    return function (arr, i) {\n      if (Array.isArray(arr)) {\n        return arr;\n      } else if (Symbol.iterator in Object(arr)) {\n        return sliceIterator(arr, i);\n      } else {\n        throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n      }\n    };\n  }();\n\n  var toConsumableArray = function (arr) {\n    if (Array.isArray(arr)) {\n      for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];\n\n      return arr2;\n    } else {\n      return Array.from(arr);\n    }\n  };\n\n  var VERSIONS = {\n      V1_0: '1.0',\n      V1_1: '1.1',\n      V1_2: '1.2',\n      // Versions of STOMP specifications supported\n      supportedVersions: function supportedVersions() {\n          return '1.2,1.1,1.0';\n      },\n      supportedProtocols: function supportedProtocols() {\n          return ['v10.stomp', 'v11.stomp', 'v12.stomp'];\n      }\n  };\n\n  var PROTOCOLS_VERSIONS = {\n      'v10.stomp': VERSIONS.V1_0,\n      'v11.stomp': VERSIONS.V1_1,\n      'v12.stomp': VERSIONS.V1_2\n  };\n\n  function getSupportedVersion(protocol, debug) {\n      var knownVersion = PROTOCOLS_VERSIONS[protocol];\n      if (!knownVersion && debug) {\n          debug('DEPRECATED: ' + protocol + ' is not a recognized STOMP version. In next major client version, this will close the connection.');\n      }\n      // 2nd temporary fallback if the protocol\n      // does not match a supported STOMP version\n      // This fallback will be removed in next major version\n      return knownVersion || VERSIONS.V1_2;\n  }\n\n  // Define constants for bytes used throughout the code.\n  var BYTES = {\n      // LINEFEED byte (octet 10)\n      LF: '\\x0A',\n      // NULL byte (octet 0)\n      NULL: '\\x00'\n  };\n\n  // utility function to trim any whitespace before and after a string\n  var trim = function trim(str) {\n      return str.replace(/^\\s+|\\s+$/g, '');\n  };\n\n  // from https://coolaj86.com/articles/unicode-string-to-a-utf-8-typed-array-buffer-in-javascript/\n  function unicodeStringToTypedArray(s) {\n      var escstr = encodeURIComponent(s);\n      var binstr = escstr.replace(/%([0-9A-F]{2})/g, function (match, p1) {\n          return String.fromCharCode('0x' + p1);\n      });\n      var arr = Array.prototype.map.call(binstr, function (c) {\n          return c.charCodeAt(0);\n      });\n      return new Uint8Array(arr);\n  }\n\n  // from https://coolaj86.com/articles/unicode-string-to-a-utf-8-typed-array-buffer-in-javascript/\n  function typedArrayToUnicodeString(ua) {\n      var binstr = String.fromCharCode.apply(String, toConsumableArray(ua));\n      var escstr = binstr.replace(/(.)/g, function (m, p) {\n          var code = p.charCodeAt(0).toString(16).toUpperCase();\n          if (code.length < 2) {\n              code = '0' + code;\n          }\n          return '%' + code;\n      });\n      return decodeURIComponent(escstr);\n  }\n\n  // Compute the size of a UTF-8 string by counting its number of bytes\n  // (and not the number of characters composing the string)\n  function sizeOfUTF8(s) {\n      if (!s) return 0;\n      return encodeURIComponent(s).match(/%..|./g).length;\n  }\n\n  function createId() {\n      var ts = new Date().getTime();\n      var rand = Math.floor(Math.random() * 1000);\n      return ts + '-' + rand;\n  }\n\n  // [STOMP Frame](http://stomp.github.com/stomp-specification-1.1.html#STOMP_Frames) Class\n\n  var Frame = function () {\n\n      // Frame constructor\n      function Frame(command) {\n          var headers = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n          var body = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n          classCallCheck(this, Frame);\n\n          this.command = command;\n          this.headers = headers;\n          this.body = body;\n      }\n\n      // Provides a textual representation of the frame\n      // suitable to be sent to the server\n\n\n      createClass(Frame, [{\n          key: 'toString',\n          value: function toString() {\n              var _this = this;\n\n              var lines = [this.command],\n                  skipContentLength = this.headers['content-length'] === false;\n              if (skipContentLength) delete this.headers['content-length'];\n\n              Object.keys(this.headers).forEach(function (name) {\n                  var value = _this.headers[name];\n                  lines.push(name + ':' + value);\n              });\n\n              if (this.body && !skipContentLength) {\n                  lines.push('content-length:' + sizeOfUTF8(this.body));\n              }\n\n              lines.push(BYTES.LF + this.body);\n\n              return lines.join(BYTES.LF);\n          }\n\n          // Unmarshall a single STOMP frame from a `data` string\n\n      }], [{\n          key: 'unmarshallSingle',\n          value: function unmarshallSingle(data) {\n              // search for 2 consecutives LF byte to split the command\n              // and headers from the body\n              var divider = data.search(new RegExp(BYTES.LF + BYTES.LF)),\n                  headerLines = data.substring(0, divider).split(BYTES.LF),\n                  command = headerLines.shift(),\n                  headers = {},\n                  body = '',\n\n              // skip the 2 LF bytes that divides the headers from the body\n              bodyIndex = divider + 2;\n\n              // Parse headers in reverse order so that for repeated headers, the 1st\n              // value is used\n              var _iteratorNormalCompletion = true;\n              var _didIteratorError = false;\n              var _iteratorError = undefined;\n\n              try {\n                  for (var _iterator = headerLines.reverse()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                      var line = _step.value;\n\n                      var idx = line.indexOf(':');\n                      headers[trim(line.substring(0, idx))] = trim(line.substring(idx + 1));\n                  }\n                  // Parse body\n                  // check for content-length or topping at the first NULL byte found.\n              } catch (err) {\n                  _didIteratorError = true;\n                  _iteratorError = err;\n              } finally {\n                  try {\n                      if (!_iteratorNormalCompletion && _iterator.return) {\n                          _iterator.return();\n                      }\n                  } finally {\n                      if (_didIteratorError) {\n                          throw _iteratorError;\n                      }\n                  }\n              }\n\n              if (headers['content-length']) {\n                  var len = parseInt(headers['content-length'], 10);\n                  body = ('' + data).substring(bodyIndex, bodyIndex + len);\n              } else {\n                  var chr = null;\n                  for (var i = bodyIndex; i < data.length; i++) {\n                      chr = data.charAt(i);\n                      if (chr === BYTES.NULL) break;\n                      body += chr;\n                  }\n              }\n\n              return new Frame(command, headers, body);\n          }\n\n          // Split the data before unmarshalling every single STOMP frame.\n          // Web socket servers can send multiple frames in a single websocket message.\n          // If the message size exceeds the websocket message size, then a single\n          // frame can be fragmented across multiple messages.\n          //\n          // `datas` is a string.\n          //\n          // returns an *array* of Frame objects\n\n      }, {\n          key: 'unmarshall',\n          value: function unmarshall(datas) {\n              // split and unmarshall *multiple STOMP frames* contained in a *single WebSocket frame*.\n              // The data is split when a NULL byte (followed by zero or many LF bytes) is found\n              var frames = datas.split(new RegExp(BYTES.NULL + BYTES.LF + '*')),\n                  firstFrames = frames.slice(0, -1),\n                  lastFrame = frames.slice(-1)[0],\n                  r = {\n                  frames: firstFrames.map(function (f) {\n                      return Frame.unmarshallSingle(f);\n                  }),\n                  partial: ''\n              };\n\n              // If this contains a final full message or just a acknowledgement of a PING\n              // without any other content, process this frame, otherwise return the\n              // contents of the buffer to the caller.\n              if (lastFrame === BYTES.LF || lastFrame.search(RegExp(BYTES.NULL + BYTES.LF + '*$')) !== -1) {\n                  r.frames.push(Frame.unmarshallSingle(lastFrame));\n              } else {\n                  r.partial = lastFrame;\n              }\n\n              return r;\n          }\n\n          // Marshall a Stomp frame\n\n      }, {\n          key: 'marshall',\n          value: function marshall(command, headers, body) {\n              var frame = new Frame(command, headers, body);\n              return frame.toString() + BYTES.NULL;\n          }\n      }]);\n      return Frame;\n  }();\n\n  // STOMP Client Class\n  //\n  // All STOMP protocol is exposed as methods of this class (`connect()`,\n  // `send()`, etc.)\n\n  var Client = function () {\n      function Client(ws) {\n          var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n          classCallCheck(this, Client);\n\n          // cannot have default options object + destructuring in the same time in method signature\n          var _options$binary = options.binary,\n              binary = _options$binary === undefined ? false : _options$binary,\n              _options$heartbeat = options.heartbeat,\n              heartbeat = _options$heartbeat === undefined ? { outgoing: 10000, incoming: 10000 } : _options$heartbeat,\n              _options$debug = options.debug,\n              debug = _options$debug === undefined ? true : _options$debug,\n              _options$protocols = options.protocols,\n              protocols = _options$protocols === undefined ? [] : _options$protocols;\n\n\n          this.ws = ws;\n          this.ws.binaryType = 'arraybuffer';\n          this.isBinary = !!binary;\n          this.hasDebug = !!debug;\n          this.connected = false;\n          // Heartbeat properties of the client\n          // outgoing: send heartbeat every 10s by default (value is in ms)\n          // incoming: expect to receive server heartbeat at least every 10s by default\n          // falsy value means no heartbeat hence 0,0\n          this.heartbeat = heartbeat || { outgoing: 0, incoming: 0 };\n          // maximum *WebSocket* frame size sent by the client. If the STOMP frame\n          // is bigger than this value, the STOMP frame will be sent using multiple\n          // WebSocket frames (default is 16KiB)\n          this.maxWebSocketFrameSize = 16 * 1024;\n          // subscription callbacks indexed by subscriber's ID\n          this.subscriptions = {};\n          this.partialData = '';\n          this.protocols = protocols;\n      }\n\n      // //// Debugging\n      //\n      // By default, debug messages are logged in the window's console if it is defined.\n      // This method is called for every actual transmission of the STOMP frames over the\n      // WebSocket.\n      //\n      // It is possible to set a `debug(message, data)` method\n      // on a client instance to handle differently the debug messages:\n      //\n      //     client.debug = function(str) {\n      //         // append the debug log to a #debug div\n      //         $(\"#debug\").append(str + \"\\n\");\n      //     };\n\n\n      createClass(Client, [{\n          key: 'debug',\n          value: function debug() {\n              var _console;\n\n              if (this.hasDebug) (_console = console).log.apply(_console, arguments);\n          }\n\n          // [CONNECT Frame](http://stomp.github.com/stomp-specification-1.1.html#CONNECT_or_STOMP_Frame)\n          //\n          // The `connect` method accepts different number of arguments and types:\n          //\n          // * `connect(headers, connectCallback)`\n          // * `connect(headers, connectCallback, errorCallback)`\n          // * `connect(login, passcode, connectCallback)`\n          // * `connect(login, passcode, connectCallback, errorCallback)`\n          // * `connect(login, passcode, connectCallback, errorCallback, host)`\n          //\n          // The errorCallback is optional and the 2 first forms allow to pass other\n          // headers in addition to `client`, `passcode` and `host`.\n\n      }, {\n          key: 'connect',\n          value: function connect() {\n              var _this = this;\n\n              var _parseConnect2 = this._parseConnect.apply(this, arguments),\n                  _parseConnect3 = slicedToArray(_parseConnect2, 3),\n                  headers = _parseConnect3[0],\n                  connectCallback = _parseConnect3[1],\n                  errorCallback = _parseConnect3[2];\n\n              this.connectCallback = connectCallback;\n              this.debug('Opening Web Socket...');\n              this.ws.onmessage = function (evt) {\n                  var data = evt.data;\n                  if (evt.data instanceof ArrayBuffer) {\n                      data = typedArrayToUnicodeString(new Uint8Array(evt.data));\n                  }\n                  _this.serverActivity = Date.now();\n                  // heartbeat\n                  if (data === BYTES.LF) {\n                      _this.debug('<<< PONG');\n                      return;\n                  }\n                  _this.debug('<<< ' + data);\n                  // Handle STOMP frames received from the server\n                  // The unmarshall function returns the frames parsed and any remaining\n                  // data from partial frames.\n                  var unmarshalledData = Frame.unmarshall(_this.partialData + data);\n                  _this.partialData = unmarshalledData.partial;\n                  unmarshalledData.frames.forEach(function (frame) {\n                      switch (frame.command) {\n                          // [CONNECTED Frame](http://stomp.github.com/stomp-specification-1.1.html#CONNECTED_Frame)\n                          case 'CONNECTED':\n                              _this.debug('connected to server ' + frame.headers.server);\n                              _this.connected = true;\n                              _this.version = frame.headers.version;\n                              _this._setupHeartbeat(frame.headers);\n                              if (connectCallback) connectCallback(frame);\n                              break;\n                          // [MESSAGE Frame](http://stomp.github.com/stomp-specification-1.1.html#MESSAGE)\n                          case 'MESSAGE':\n                              // the `onreceive` callback is registered when the client calls\n                              // `subscribe()`.\n                              // If there is registered subscription for the received message,\n                              // we used the default `onreceive` method that the client can set.\n                              // This is useful for subscriptions that are automatically created\n                              // on the browser side (e.g. [RabbitMQ's temporary\n                              // queues](http://www.rabbitmq.com/stomp.html)).\n                              var subscription = frame.headers.subscription;\n                              var onreceive = _this.subscriptions[subscription] || _this.onreceive;\n                              if (onreceive) {\n                                  // 1.2 define ack header if ack is set to client\n                                  // and this header must be used for ack/nack\n                                  var messageID = _this.version === VERSIONS.V1_2 && frame.headers.ack || frame.headers['message-id'];\n                                  // add `ack()` and `nack()` methods directly to the returned frame\n                                  // so that a simple call to `message.ack()` can acknowledge the message.\n                                  frame.ack = _this.ack.bind(_this, messageID, subscription);\n                                  frame.nack = _this.nack.bind(_this, messageID, subscription);\n                                  onreceive(frame);\n                              } else {\n                                  _this.debug('Unhandled received MESSAGE: ' + frame);\n                              }\n                              break;\n                          // [RECEIPT Frame](http://stomp.github.com/stomp-specification-1.1.html#RECEIPT)\n                          //\n                          // The client instance can set its `onreceipt` field to a function taking\n                          // a frame argument that will be called when a receipt is received from\n                          // the server:\n                          //\n                          //     client.onreceipt = function(frame) {\n                          //       receiptID = frame.headers['receipt-id'];\n                          //       ...\n                          //     }\n                          case 'RECEIPT':\n                              if (_this.onreceipt) _this.onreceipt(frame);\n                              break;\n                          // [ERROR Frame](http://stomp.github.com/stomp-specification-1.1.html#ERROR)\n                          case 'ERROR':\n                              if (errorCallback) errorCallback(frame);\n                              break;\n                          default:\n                              _this.debug('Unhandled frame: ' + frame);\n                      }\n                  });\n              };\n              this.ws.onclose = function (event) {\n                  _this.debug('Whoops! Lost connection to ' + _this.ws.url + ':', { event: event });\n                  _this._cleanUp();\n                  if (errorCallback) errorCallback(event);\n              };\n              this.ws.onopen = function () {\n                  _this.debug('Web Socket Opened...');\n                  // 1st protocol fallback on user 1st protocols options\n                  // to prevent edge case where server does not comply and respond with a choosen protocol\n                  // or when ws client does not handle protocol property very well\n                  headers['accept-version'] = getSupportedVersion(_this.ws.protocol || _this.protocols[0], _this.debug.bind(_this));\n                  // Check if we already have heart-beat in headers before adding them\n                  if (!headers['heart-beat']) {\n                      headers['heart-beat'] = [_this.heartbeat.outgoing, _this.heartbeat.incoming].join(',');\n                  }\n                  _this._transmit('CONNECT', headers);\n              };\n              if (this.ws.readyState === this.ws.OPEN) {\n                  this.ws.onopen();\n              }\n          }\n\n          // [DISCONNECT Frame](http://stomp.github.com/stomp-specification-1.1.html#DISCONNECT)\n\n      }, {\n          key: 'disconnect',\n          value: function disconnect(disconnectCallback) {\n              var headers = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n              this._transmit('DISCONNECT', headers);\n              // Discard the onclose callback to avoid calling the errorCallback when\n              // the client is properly disconnected.\n              this.ws.onclose = null;\n              this.ws.close();\n              this._cleanUp();\n              // TODO: what's the point of this callback disconnect is not async\n              if (disconnectCallback) disconnectCallback();\n          }\n\n          // [SEND Frame](http://stomp.github.com/stomp-specification-1.1.html#SEND)\n          //\n          // * `destination` is MANDATORY.\n\n      }, {\n          key: 'send',\n          value: function send(destination) {\n              var body = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n              var headers = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n              var hdrs = Object.assign({}, headers);\n              hdrs.destination = destination;\n              this._transmit('SEND', hdrs, body);\n          }\n\n          // [BEGIN Frame](http://stomp.github.com/stomp-specification-1.1.html#BEGIN)\n          //\n          // If no transaction ID is passed, one will be created automatically\n\n      }, {\n          key: 'begin',\n          value: function begin() {\n              var transaction = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'tx-' + createId();\n\n              this._transmit('BEGIN', { transaction: transaction });\n              return {\n                  id: transaction,\n                  commit: this.commit.bind(this, transaction),\n                  abort: this.abort.bind(this, transaction)\n              };\n          }\n\n          // [COMMIT Frame](http://stomp.github.com/stomp-specification-1.1.html#COMMIT)\n          //\n          // * `transaction` is MANDATORY.\n          //\n          // It is preferable to commit a transaction by calling `commit()` directly on\n          // the object returned by `client.begin()`:\n          //\n          //     var tx = client.begin(txid);\n          //     ...\n          //     tx.commit();\n\n      }, {\n          key: 'commit',\n          value: function commit(transaction) {\n              this._transmit('COMMIT', { transaction: transaction });\n          }\n\n          // [ABORT Frame](http://stomp.github.com/stomp-specification-1.1.html#ABORT)\n          //\n          // * `transaction` is MANDATORY.\n          //\n          // It is preferable to abort a transaction by calling `abort()` directly on\n          // the object returned by `client.begin()`:\n          //\n          //     var tx = client.begin(txid);\n          //     ...\n          //     tx.abort();\n\n      }, {\n          key: 'abort',\n          value: function abort(transaction) {\n              this._transmit('ABORT', { transaction: transaction });\n          }\n\n          // [ACK Frame](http://stomp.github.com/stomp-specification-1.1.html#ACK)\n          //\n          // * `messageID` & `subscription` are MANDATORY.\n          //\n          // It is preferable to acknowledge a message by calling `ack()` directly\n          // on the message handled by a subscription callback:\n          //\n          //     client.subscribe(destination,\n          //       function(message) {\n          //         // process the message\n          //         // acknowledge it\n          //         message.ack();\n          //       },\n          //       {'ack': 'client'}\n          //     );\n\n      }, {\n          key: 'ack',\n          value: function ack(messageID, subscription) {\n              var headers = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n              var hdrs = Object.assign({}, headers);\n              // 1.2 change id header name from message-id to id\n              var idAttr = this.version === VERSIONS.V1_2 ? 'id' : 'message-id';\n              hdrs[idAttr] = messageID;\n              hdrs.subscription = subscription;\n              this._transmit('ACK', hdrs);\n          }\n\n          // [NACK Frame](http://stomp.github.com/stomp-specification-1.1.html#NACK)\n          //\n          // * `messageID` & `subscription` are MANDATORY.\n          //\n          // It is preferable to nack a message by calling `nack()` directly on the\n          // message handled by a subscription callback:\n          //\n          //     client.subscribe(destination,\n          //       function(message) {\n          //         // process the message\n          //         // an error occurs, nack it\n          //         message.nack();\n          //       },\n          //       {'ack': 'client'}\n          //     );\n\n      }, {\n          key: 'nack',\n          value: function nack(messageID, subscription) {\n              var headers = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n              var hdrs = Object.assign({}, headers);\n              // 1.2 change id header name from message-id to id\n              var idAttr = this.version === VERSIONS.V1_2 ? 'id' : 'message-id';\n              hdrs[idAttr] = messageID;\n              hdrs.subscription = subscription;\n              this._transmit('NACK', hdrs);\n          }\n\n          // [SUBSCRIBE Frame](http://stomp.github.com/stomp-specification-1.1.html#SUBSCRIBE)\n\n      }, {\n          key: 'subscribe',\n          value: function subscribe(destination, callback) {\n              var headers = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n              var hdrs = Object.assign({}, headers);\n              // for convenience if the `id` header is not set, we create a new one for this client\n              // that will be returned to be able to unsubscribe this subscription\n              if (!hdrs.id) hdrs.id = 'sub-' + createId();\n              hdrs.destination = destination;\n              this.subscriptions[hdrs.id] = callback;\n              this._transmit('SUBSCRIBE', hdrs);\n              return {\n                  id: hdrs.id,\n                  unsubscribe: this.unsubscribe.bind(this, hdrs.id)\n              };\n          }\n\n          // [UNSUBSCRIBE Frame](http://stomp.github.com/stomp-specification-1.1.html#UNSUBSCRIBE)\n          //\n          // * `id` is MANDATORY.\n          //\n          // It is preferable to unsubscribe from a subscription by calling\n          // `unsubscribe()` directly on the object returned by `client.subscribe()`:\n          //\n          //     var subscription = client.subscribe(destination, onmessage);\n          //     ...\n          //     subscription.unsubscribe(headers);\n\n      }, {\n          key: 'unsubscribe',\n          value: function unsubscribe(id) {\n              var headers = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n              var hdrs = Object.assign({}, headers);\n              delete this.subscriptions[id];\n              hdrs.id = id;\n              this._transmit('UNSUBSCRIBE', hdrs);\n          }\n\n          // Clean up client resources when it is disconnected or the server did not\n          // send heart beats in a timely fashion\n\n      }, {\n          key: '_cleanUp',\n          value: function _cleanUp() {\n              this.connected = false;\n              clearInterval(this.pinger);\n              clearInterval(this.ponger);\n          }\n\n          // Base method to transmit any stomp frame\n\n      }, {\n          key: '_transmit',\n          value: function _transmit(command, headers, body) {\n              var out = Frame.marshall(command, headers, body);\n              this.debug('>>> ' + out, { frame: { command: command, headers: headers, body: body } });\n              this._wsSend(out);\n          }\n      }, {\n          key: '_wsSend',\n          value: function _wsSend(data) {\n              if (this.isBinary) data = unicodeStringToTypedArray(data);\n              this.debug('>>> length ' + data.length);\n              // if necessary, split the *STOMP* frame to send it on many smaller\n              // *WebSocket* frames\n              while (true) {\n                  if (data.length > this.maxWebSocketFrameSize) {\n                      this.ws.send(data.slice(0, this.maxWebSocketFrameSize));\n                      data = data.slice(this.maxWebSocketFrameSize);\n                      this.debug('remaining = ' + data.length);\n                  } else {\n                      return this.ws.send(data);\n                  }\n              }\n          }\n\n          // Heart-beat negotiation\n\n      }, {\n          key: '_setupHeartbeat',\n          value: function _setupHeartbeat(headers) {\n              var _this2 = this;\n\n              if (this.version !== VERSIONS.V1_1 && this.version !== VERSIONS.V1_2) return;\n\n              // heart-beat header received from the server looks like:\n              //\n              //     heart-beat: sx, sy\n\n              var _split$map = (headers['heart-beat'] || '0,0').split(',').map(function (v) {\n                  return parseInt(v, 10);\n              }),\n                  _split$map2 = slicedToArray(_split$map, 2),\n                  serverOutgoing = _split$map2[0],\n                  serverIncoming = _split$map2[1];\n\n              if (!(this.heartbeat.outgoing === 0 || serverIncoming === 0)) {\n                  var ttl = Math.max(this.heartbeat.outgoing, serverIncoming);\n                  this.debug('send PING every ' + ttl + 'ms');\n                  this.pinger = setInterval(function () {\n                      _this2._wsSend(BYTES.LF);\n                      _this2.debug('>>> PING');\n                  }, ttl);\n              }\n\n              if (!(this.heartbeat.incoming === 0 || serverOutgoing === 0)) {\n                  var _ttl = Math.max(this.heartbeat.incoming, serverOutgoing);\n                  this.debug('check PONG every ' + _ttl + 'ms');\n                  this.ponger = setInterval(function () {\n                      var delta = Date.now() - _this2.serverActivity;\n                      // We wait twice the TTL to be flexible on window's setInterval calls\n                      if (delta > _ttl * 2) {\n                          _this2.debug('did not receive server activity for the last ' + delta + 'ms');\n                          _this2.ws.close();\n                      }\n                  }, _ttl);\n              }\n          }\n\n          // parse the arguments number and type to find the headers, connectCallback and\n          // (eventually undefined) errorCallback\n\n      }, {\n          key: '_parseConnect',\n          value: function _parseConnect() {\n              var headers = {},\n                  connectCallback = void 0,\n                  errorCallback = void 0;\n\n              for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n                  args[_key] = arguments[_key];\n              }\n\n              switch (args.length) {\n                  case 2:\n                      headers = args[0];\n                      connectCallback = args[1];\n\n                      break;\n                  case 3:\n                      if (args[1] instanceof Function) {\n                          headers = args[0];\n                          connectCallback = args[1];\n                          errorCallback = args[2];\n                      } else {\n                          headers.login = args[0];\n                          headers.passcode = args[1];\n                          connectCallback = args[2];\n                      }\n                      break;\n                  case 4:\n                      headers.login = args[0];\n                      headers.passcode = args[1];\n                      connectCallback = args[2];\n                      errorCallback = args[3];\n\n                      break;\n                  default:\n                      headers.login = args[0];\n                      headers.passcode = args[1];\n                      connectCallback = args[2];\n                      errorCallback = args[3];\n                      headers.host = args[4];\n\n              }\n\n              return [headers, connectCallback, errorCallback];\n          }\n      }]);\n      return Client;\n  }();\n\n  // The `webstomp` Object\n  var webstomp = {\n      Frame: Frame,\n      VERSIONS: VERSIONS,\n      // This method creates a WebSocket client that is connected to\n      // the STOMP server located at the url.\n      client: function client(url) {\n          var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n          var ws = new WebSocket(url, options.protocols || VERSIONS.supportedProtocols());\n          return new Client(ws, options);\n      },\n\n      // This method is an alternative to `webstomp.client()` to let the user\n      // specify the WebSocket to use (either a standard HTML5 WebSocket or\n      // a similar object).\n      over: function over() {\n          for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n              args[_key] = arguments[_key];\n          }\n\n          return new (Function.prototype.bind.apply(Client, [null].concat(args)))();\n      }\n  };\n\n  return webstomp;\n\n})));\n"],
  "mappings": "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",
  "names": ["trim", "Frame", "Client"]
}
